// netlify/functions/color-assistant.js
export async function handler(event, context) {
  const cors = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
    "Access-Control-Allow-Methods": "POST, OPTIONS"
  };

  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 200, headers: cors };
  }

  if (event.httpMethod !== "POST") {
    return { statusCode: 405, headers: cors, body: "Method Not Allowed" };
  }

  // ---- auth (member pass) ----
  const auth = event.headers["authorization"] || event.headers["Authorization"] || "";
  const token = auth.startsWith("Bearer ") ? auth.slice(7) : "";
  if (!token) {
    return {
      statusCode: 401,
      headers: cors,
      body: "Missing Member Pass (Authorization: Bearer <pass>)"
    };
  }

  // Load passes from env
  let passes = [];
  try {
    passes = JSON.parse(process.env.MEMBER_PASSES || "[]");
  } catch {}

  // Validate pass
  const found = passes.find(p => p === token || p.pass === token);
  if (!found) {
    return { statusCode: 403, headers: cors, body: "Invalid or inactive pass" };
  }

  // ---- OpenAI call ----
  try {
    const { prompt } = JSON.parse(event.body || "{}");
    if (!prompt) {
      return { statusCode: 400, headers: cors, body: "Missing prompt" };
    }

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }]
      })
    });

    const data = await response.json();
    return {
      statusCode: 200,
      headers: cors,
      body: JSON.stringify(data)
    };
  } catch (err) {
    return {
      statusCode: 500,
      headers: cors,
      body: `Error: ${err.message}`
    };
  }
}
